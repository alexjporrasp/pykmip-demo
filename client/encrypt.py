
import binascii
import logging
import sys

from kmip.core import enums
from kmip.demos import utils
from kmip.pie import client


if __name__ == '__main__':
    logger = utils.build_console_logger(logging.INFO)

    # Build and parse arguments
    parser = utils.build_cli_parser(enums.Operation.ENCRYPT)
    opts, args = parser.parse_args(sys.argv[1:])
    config = opts.config

    if (len(args) != 1):
        print('Pick a file to encrypt.')
        exit()

    with open(args[0], 'rb') as f:
        file_to_encrypt = open(args[0], 'rb')
        file_bytes = file_to_encrypt.read()


    # Build the client and connect to the server
    with client.ProxyKmipClient(
            config=config,
            config_file=opts.config_file
    ) as client:
        # Create an encryption key.
        try:
            key_id = client.create(
                enums.CryptographicAlgorithm.AES,
                128,
                cryptographic_usage_mask=[
                    enums.CryptographicUsageMask.ENCRYPT,
                    enums.CryptographicUsageMask.DECRYPT
                ]
            )
            logger.info("Successfully created a new encryption key.")
            logger.info("Secret ID: {0}".format(key_id))
        except Exception as e:
            logger.error(e)
            sys.exit(-1)

        # Activate the encryption key so that it can be used.
        try:
            client.activate(key_id)
            logger.info("Successfully activated the encryption key.")
        except Exception as e:
            logger.error(e)
            sys.exit(-1)

        # Encrypt some data with the encryption key.
        try:
            logger.info(
                "Raw data: {0}".format(binascii.hexlify(file_bytes))
            )

            cipher_text, autogenerated_iv = client.encrypt(
                # message,
                file_bytes, 
                uid=key_id,
                cryptographic_parameters={
                    'cryptographic_algorithm':
                        enums.CryptographicAlgorithm.AES,
                    'block_cipher_mode': enums.BlockCipherMode.CBC,
                    'padding_method': enums.PaddingMethod.ANSI_X923
                },
                iv_counter_nonce=(
                    b'\x01\x7D\x45\xA0\x88\x08\x11\x11'
                    b'\xF0\x00\x12\xFF\x7A\x3A\x36\x90'
                )
            )

            with open(''.join(args[0].rsplit('.', 1)[:-1])+'_enc', 'wb+') as f:
                key_bytes = bytes([int(key_id)]).rjust(20, b'\x00')
                f.write(key_bytes + cipher_text)

            logger.info("Successfully encrypted the data.")
            logger.info(
                "Cipher data: {0}".format(binascii.hexlify(cipher_text))
            )
            logger.info(
                "No autogenerated IV expected, since one was provided."
            )
            logger.info("Autogenerated IV: {0}".format(autogenerated_iv))
        except Exception as e:
            logger.error(e)